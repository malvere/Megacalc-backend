// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: promo_codes.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createPromoCode = `-- name: CreatePromoCode :one
INSERT INTO promo_codes (
    promo_id, promo_name, promo, active
) VALUES (
    $1, $2, $3, $4
)
RETURNING promo_id, promo_name, promo, active
`

type CreatePromoCodeParams struct {
	PromoID   uuid.UUID `json:"promo_id"`
	PromoName string    `json:"promo_name"`
	Promo     string    `json:"promo"`
	Active    bool      `json:"active"`
}

func (q *Queries) CreatePromoCode(ctx context.Context, arg CreatePromoCodeParams) (PromoCode, error) {
	row := q.db.QueryRowContext(ctx, createPromoCode,
		arg.PromoID,
		arg.PromoName,
		arg.Promo,
		arg.Active,
	)
	var i PromoCode
	err := row.Scan(
		&i.PromoID,
		&i.PromoName,
		&i.Promo,
		&i.Active,
	)
	return i, err
}

const deletePromoCode = `-- name: DeletePromoCode :exec
DELETE FROM promo_codes
WHERE promo_name = $1
`

func (q *Queries) DeletePromoCode(ctx context.Context, promoName string) error {
	_, err := q.db.ExecContext(ctx, deletePromoCode, promoName)
	return err
}

const querryPromoCodes = `-- name: QuerryPromoCodes :many
SELECT promo_id, promo_name, promo, active
FROM promo_codes
WHERE active = $1
`

func (q *Queries) QuerryPromoCodes(ctx context.Context, active bool) ([]PromoCode, error) {
	rows, err := q.db.QueryContext(ctx, querryPromoCodes, active)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PromoCode
	for rows.Next() {
		var i PromoCode
		if err := rows.Scan(
			&i.PromoID,
			&i.PromoName,
			&i.Promo,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePromoCode = `-- name: UpdatePromoCode :exec
UPDATE promo_codes
SET active = $2
WHERE promo_name = $1
`

type UpdatePromoCodeParams struct {
	PromoName string `json:"promo_name"`
	Active    bool   `json:"active"`
}

func (q *Queries) UpdatePromoCode(ctx context.Context, arg UpdatePromoCodeParams) error {
	_, err := q.db.ExecContext(ctx, updatePromoCode, arg.PromoName, arg.Active)
	return err
}
