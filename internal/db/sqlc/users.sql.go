// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_id, telegram_id, invite_code_id
) VALUES (
    $1, $2, $3
)
RETURNING user_id, telegram_id, invite_code_id
`

type CreateUserParams struct {
	UserID       uuid.UUID `json:"user_id"`
	TelegramID   string    `json:"telegram_id"`
	InviteCodeID uuid.UUID `json:"invite_code_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.UserID, arg.TelegramID, arg.InviteCodeID)
	var i User
	err := row.Scan(&i.UserID, &i.TelegramID, &i.InviteCodeID)
	return i, err
}

const deleteByTGID = `-- name: DeleteByTGID :exec
DELETE FROM users
WHERE telegram_id = $1
`

func (q *Queries) DeleteByTGID(ctx context.Context, telegramID string) error {
	_, err := q.db.ExecContext(ctx, deleteByTGID, telegramID)
	return err
}

const findByTGID = `-- name: FindByTGID :one
SELECT user_id, telegram_id, invite_code_id
FROM users
WHERE telegram_id = $1 LIMIT 1
`

func (q *Queries) FindByTGID(ctx context.Context, telegramID string) (User, error) {
	row := q.db.QueryRowContext(ctx, findByTGID, telegramID)
	var i User
	err := row.Scan(&i.UserID, &i.TelegramID, &i.InviteCodeID)
	return i, err
}

const listAllUsers = `-- name: ListAllUsers :many
SELECT user_id, telegram_id, invite_code_id
FROM users
LIMIT 20
OFFSET $1
`

func (q *Queries) ListAllUsers(ctx context.Context, offset int32) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listAllUsers, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.UserID, &i.TelegramID, &i.InviteCodeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInviteByTGID = `-- name: UpdateInviteByTGID :exec
UPDATE users
SET invite_code_id = $2
WHERE telegram_id = $1
`

type UpdateInviteByTGIDParams struct {
	TelegramID   string    `json:"telegram_id"`
	InviteCodeID uuid.UUID `json:"invite_code_id"`
}

func (q *Queries) UpdateInviteByTGID(ctx context.Context, arg UpdateInviteByTGIDParams) error {
	_, err := q.db.ExecContext(ctx, updateInviteByTGID, arg.TelegramID, arg.InviteCodeID)
	return err
}
