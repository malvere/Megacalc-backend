// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: invite_code.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createCode = `-- name: CreateCode :one
INSERT INTO invite_codes (
    code_id, code, active
) VALUES (
    $1, $2, $3
)
RETURNING code_id, code, active
`

type CreateCodeParams struct {
	CodeID uuid.UUID `json:"code_id"`
	Code   string    `json:"code"`
	Active bool      `json:"active"`
}

func (q *Queries) CreateCode(ctx context.Context, arg CreateCodeParams) (InviteCode, error) {
	row := q.db.QueryRowContext(ctx, createCode, arg.CodeID, arg.Code, arg.Active)
	var i InviteCode
	err := row.Scan(&i.CodeID, &i.Code, &i.Active)
	return i, err
}

const deleteCode = `-- name: DeleteCode :exec
DELETE FROM invite_codes
WHERE code = $1
`

func (q *Queries) DeleteCode(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, deleteCode, code)
	return err
}

const findCode = `-- name: FindCode :one
SELECT code_id, code, active
FROM invite_codes
WHERE code = $1 LIMIT 1
`

func (q *Queries) FindCode(ctx context.Context, code string) (InviteCode, error) {
	row := q.db.QueryRowContext(ctx, findCode, code)
	var i InviteCode
	err := row.Scan(&i.CodeID, &i.Code, &i.Active)
	return i, err
}

const listAllCodes = `-- name: ListAllCodes :many
SELECT code_id, code, active
FROM invite_codes
LIMIT 20
OFFSET $1
`

func (q *Queries) ListAllCodes(ctx context.Context, offset int32) ([]InviteCode, error) {
	rows, err := q.db.QueryContext(ctx, listAllCodes, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InviteCode
	for rows.Next() {
		var i InviteCode
		if err := rows.Scan(&i.CodeID, &i.Code, &i.Active); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCode = `-- name: UpdateCode :exec
UPDATE invite_codes
SET active = $2
WHERE code = $1
`

type UpdateCodeParams struct {
	Code   string `json:"code"`
	Active bool   `json:"active"`
}

func (q *Queries) UpdateCode(ctx context.Context, arg UpdateCodeParams) error {
	_, err := q.db.ExecContext(ctx, updateCode, arg.Code, arg.Active)
	return err
}
